// <auto-generated />
using System;
using System.Collections.Generic;
using Explorer.Tours.Core.Domain.Problem;
using Explorer.Tours.Core.Domain.Sessions;
using Explorer.Tours.Core.Domain.Tours;
using Explorer.Tours.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Explorer.Tours.Infrastructure.Migrations
{
    [DbContext(typeof(ToursContext))]
    partial class ToursContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("tours")
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Explorer.BuildingBlocks.Core.Domain.DomainEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AggregateRootId")
                        .HasColumnType("bigint");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("SessionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.ToTable("DomainEvent", "tours");

                    b.HasDiscriminator<string>("EventType").HasValue("DomainEvent");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Equipment.Equipment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Equipment", "tours");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Equipment.EquipmentTracking", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<long>>("NeededEquipment")
                        .IsRequired()
                        .HasColumnType("bigint[]");

                    b.Property<long>("TouristId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTrackings", "tours");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Facilities.Facility", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Facilities", "tours");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Facility");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Problem.TourProblem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("boolean");

                    b.Property<List<TourProblemMessage>>("Messages")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("TourId")
                        .HasColumnType("bigint");

                    b.Property<long>("TouristId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TourProblems", "tours");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Rating.TourRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfCommenting")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfVisit")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string[]>("Images")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("Mark")
                        .HasColumnType("integer");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TourId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TourRatings", "tours");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Sessions.PositionSimulator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<long>("TouristId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TouristId")
                        .IsUnique();

                    b.ToTable("PositionSimulators", "tours");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Sessions.Session", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<List<CompletedKeyPoint>>("CompletedKeyPoints")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("DistanceCrossedPercent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastActivity")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<int>("SessionStatus")
                        .HasColumnType("integer");

                    b.Property<long>("TourId")
                        .HasColumnType("bigint");

                    b.Property<long>("TouristId")
                        .HasColumnType("bigint");

                    b.Property<int>("Transportation")
                        .HasColumnType("integer");

                    b.Property<int>("Version")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("TourId");

                    b.ToTable("Sessions", "tours");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Tours.Preferences", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BicycleRate")
                        .HasColumnType("integer");

                    b.Property<int>("BoatRate")
                        .HasColumnType("integer");

                    b.Property<int>("CarRate")
                        .HasColumnType("integer");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("WalkingRate")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Preferences", "tours");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Tours.Tour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ArchivedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<double>("DistanceInKm")
                        .HasColumnType("double precision");

                    b.Property<List<TourDuration>>("Durations")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int[]>("Equipment")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Tour", "tours");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Tours.TourKeyPoint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PositionInTour")
                        .HasColumnType("integer");

                    b.Property<long?>("PublicPointId")
                        .HasColumnType("bigint");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<long?>("TourId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TourId");

                    b.ToTable("TourKeyPoints", "tours");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TourKeyPoint");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Sessions.DomainEvents.KeyPointCompleted", b =>
                {
                    b.HasBaseType("Explorer.BuildingBlocks.Core.Domain.DomainEvent");

                    b.Property<DateTime>("TimeOfCompletion")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("KeyPointUpdated");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Sessions.DomainEvents.LocationUpdated", b =>
                {
                    b.HasBaseType("Explorer.BuildingBlocks.Core.Domain.DomainEvent");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.HasDiscriminator().HasValue("LocationUpdated");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Sessions.DomainEvents.SessionCreated", b =>
                {
                    b.HasBaseType("Explorer.BuildingBlocks.Core.Domain.DomainEvent");

                    b.Property<DateTime>("TimeOfCreation")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("SessionCreated");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Facilities.PublicFacility", b =>
                {
                    b.HasBaseType("Explorer.Tours.Core.Domain.Facilities.Facility");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("PublicFacility");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Tours.PublicTourKeyPoints", b =>
                {
                    b.HasBaseType("Explorer.Tours.Core.Domain.Tours.TourKeyPoint");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("PublicTourKeyPoints");
                });

            modelBuilder.Entity("Explorer.BuildingBlocks.Core.Domain.DomainEvent", b =>
                {
                    b.HasOne("Explorer.Tours.Core.Domain.Sessions.Session", null)
                        .WithMany("Changes")
                        .HasForeignKey("SessionId");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Sessions.Session", b =>
                {
                    b.HasOne("Explorer.Tours.Core.Domain.Sessions.PositionSimulator", null)
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Explorer.Tours.Core.Domain.Tours.Tour", null)
                        .WithMany()
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Tours.TourKeyPoint", b =>
                {
                    b.HasOne("Explorer.Tours.Core.Domain.Tours.Tour", null)
                        .WithMany("KeyPoints")
                        .HasForeignKey("TourId");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Sessions.Session", b =>
                {
                    b.Navigation("Changes");
                });

            modelBuilder.Entity("Explorer.Tours.Core.Domain.Tours.Tour", b =>
                {
                    b.Navigation("KeyPoints");
                });
#pragma warning restore 612, 618
        }
    }
}
